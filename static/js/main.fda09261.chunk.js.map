{"version":3,"sources":["components/AddField.jsx","components/Item.jsx","App.js","redux/actions/tasks.js","redux/reducers/tasks.js","redux/index.js","index.js"],"names":["AddField","onClickAdd","onInputChange","inputValue","onClickCheckbox","isChecked","className","Checkbox","onClick","checked","icon","checkedIcon","TextField","value","onChange","placeholder","variant","fullWidth","Button","Item","text","completed","onDelete","onClickChecked","updateTask","ListItem","Typography","IconButton","style","fontSize","App","dispatch","useDispatch","state","useSelector","React","useState","setInputValue","setIsChecked","filterBy","setFilterBy","useEffect","localStorage","setItem","JSON","stringify","tasks","isDisabled","length","every","item","Paper","elevation","trim","type","payload","event","target","Divider","Tabs","all","active","Tab","label","List","filter","obj","map","id","window","confirm","find","deleteTask","toggleComplete","updateText","prompt","handleTaskUpdate","disabled","deleteText","initialState","parse","getItem","rootReducer","combineReducers","action","store","createStore","console","log","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SAOaA,EAAW,SAAC,GAA2E,IAAzEC,EAAwE,EAAxEA,WAAYC,EAA4D,EAA5DA,cAAeC,EAA6C,EAA7CA,WAAYC,EAAiC,EAAjCA,gBAAiBC,EAAgB,EAAhBA,UACjF,OACE,sBAAKC,UAAU,QAAf,UACE,cAACC,EAAA,EAAD,CACEC,QAASJ,EACTK,QAASJ,EACTC,UAAU,WACVI,KAAM,cAAC,IAAD,IACNC,YAAa,cAAC,IAAD,MAEf,cAACC,EAAA,EAAD,CACEC,MAAOV,EACPW,SAAUZ,EACVa,YAAY,oHACZC,QAAQ,WACRC,WAAS,IAEX,cAACC,EAAA,EAAD,CAAQV,QAASP,EAAjB,SACE,cAAC,IAAD,U,6DCjBKkB,EAAO,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,KAAMC,EAAsD,EAAtDA,UAAWC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,WAEhE,OACE,cAACC,EAAA,EAAD,UACE,sBAAKnB,UAAU,cAAf,UACE,cAACC,EAAA,EAAD,CACEO,SAAUS,EACVd,QAASY,EACTX,KAAM,cAAC,IAAD,IACNC,YAAa,cAAC,IAAD,MAEf,cAACe,EAAA,EAAD,CAAYpB,UAAU,YAAtB,SAAmCc,IACnC,sBAAKd,UAAU,sBAAf,UACE,cAACqB,EAAA,EAAD,CAAYnB,QAASgB,EAArB,SACE,cAAC,IAAD,CAAUI,MAAO,CAAEC,SAAU,QAE/B,cAACF,EAAA,EAAD,CAAYnB,QAASc,EAArB,SACE,cAAC,IAAD,CAAmBM,MAAO,CAAEC,SAAU,iB,QCsHnCC,MAtIf,WACE,IAAMC,EAAWC,cACXC,EAAQC,aAAY,SAACD,GAAD,OAAWA,KAErC,EAAoCE,IAAMC,SAAS,IAAnD,mBAAOjC,EAAP,KAAmBkC,EAAnB,KACA,EAAkCF,IAAMC,UAAS,GAAjD,mBAAO/B,EAAP,KAAkBiC,EAAlB,KACA,EAAgCH,IAAMC,SAAS,OAA/C,mBAAOG,EAAP,KAAiBC,EAAjB,KAEAL,IAAMM,WAAU,WACdC,aAAaC,QAAQ,QAASC,KAAKC,UAAUZ,EAAMa,UAClD,CAACb,IAEJ,IAqDMc,EAAa,WACjB,MAAiB,QAAbR,GAA6C,IAAvBN,EAAMa,MAAME,WAGrB,WAAbT,IAAyBN,EAAMa,MAAMG,OAAM,SAACC,GAAD,OAA6B,IAAnBA,EAAK7B,iBAG7C,cAAbkB,IAA4BN,EAAMa,MAAMG,OAAM,SAACC,GAAD,OAA6B,IAAnBA,EAAK7B,gBAMnE,OACE,qBAAKf,UAAU,MAAf,SACE,eAAC6C,EAAA,EAAD,CAAO7C,UAAU,UAAjB,UACE,cAAC6C,EAAA,EAAD,CAAO7C,UAAU,SAAS8C,UAAW,EAArC,SACE,uGAEF,cAAC,EAAD,CACEjD,WAAYA,EACZE,UAAWA,EACXD,gBApDgB,WACtBkC,GAAcjC,IAoDRJ,WAtEe,WACjBE,EAAWkD,SACbtB,EC7BuC,CAC3CuB,KAAM,WACNC,QAAS,CACPnC,KD0BmBjB,ECzBnBkB,UDyB+BhB,KAC7BgC,EAAc,IACdC,GAAa,KAmETpC,cA/Dc,SAACsD,GACrBnB,EAAcmB,EAAMC,OAAO5C,UAgEvB,cAAC6C,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,CAAM9C,MAhFQ,CAClB+C,IAAK,EACLC,OAAQ,EACRxC,UAAW,GA6EkBkB,GAAzB,UACE,cAACuB,EAAA,EAAD,CAAKtD,QAAS,kBAAMgC,EAAY,QAAQuB,MAAM,uBAC9C,cAACD,EAAA,EAAD,CAAKtD,QAAS,kBAAMgC,EAAY,WAAWuB,MAAM,qDACjD,cAACD,EAAA,EAAD,CAAKtD,QAAS,kBAAMgC,EAAY,cAAcuB,MAAM,0EAEtD,cAACL,EAAA,EAAD,IACA,cAACM,EAAA,EAAD,UACG/B,EAAMa,MACJmB,QAAO,SAACC,GACP,MAAiB,cAAb3B,EACK2B,EAAI7C,UAEI,WAAbkB,IACM2B,EAAI7C,aAIf8C,KAAI,SAACD,GAAD,OACH,cAAC,EAAD,CAEE9C,KAAM8C,EAAI9C,KACVC,UAAW6C,EAAI7C,UACfC,SAAU,kBApFG8C,EAoFqBF,EAAIE,QAnF9CC,OAAOC,QAAP,wGAAqCrC,EAAMa,MAAMyB,MAAK,SAACrB,GAAD,OAAUA,EAAKkB,KAAOA,KAAIhD,KAAhF,QACFW,ECjCoB,SAAAqC,GAAE,MAAK,CAC/Bd,KAAM,cACNC,QAASa,GD+BII,CAAWJ,KAFE,IAACA,GAqFb7C,eAAgB,kBA5EN6C,EA4E2BF,EAAIE,QA3ErDrC,ECpC0B,SAAAqC,GAAE,MAAK,CACnCd,KAAM,kBACNC,QAASa,GDkCEK,CAAeL,IADH,IAACA,GA6EV5C,WAAY,kBAxDD,SAAC4C,GACxB,IAAIM,EAAaC,OAAO,wHAA0B,CAAC1C,EAAMa,MAAMyB,MAAK,SAACL,GAAD,OAASA,EAAIE,KAAOA,KAAIhD,OAC5FW,EC3CsB,SAACqC,EAAIhD,GAAL,MAAe,CACvCkC,KAAM,cACNC,QAAS,CACPa,KACAM,WAAYtD,IDuCHI,CAAW4C,EAAIM,IAsDME,CAAiBV,EAAIE,MALlCF,EAAIE,SASjB,cAACV,EAAA,EAAD,IACA,sBAAKpD,UAAU,gBAAf,UACE,cAACY,EAAA,EAAD,CAAQ2D,SAAU9B,IAAcvC,QAlEd,WACxBuB,EC3CwC,CAC1CuB,KAAM,kBACNC,QDyCyBhB,KAiEjB,SACGN,EAAMa,MAAMG,OAAM,SAACiB,GAAD,OAA2B,IAAlBA,EAAI7C,aAAsB,4EAAkB,wEAE1E,cAACH,EAAA,EAAD,CAAQ2D,SAAU9B,IAAcvC,QAlFjB,WACrB,IAAIsE,EAAa,sGACA,WAAbvC,IACFuC,EAAa,wJAEE,cAAbvC,IACFuC,EAAa,0KAEXT,OAAOC,QAAQQ,IACjB/C,EC3CsC,CAC1CuB,KAAM,kBACNC,QDyC2BhB,KAyEnB,0F,wBEtIJwC,EAAenC,KAAKoC,MAAMtC,aAAauC,QAAQ,UAAYrC,KAAKoC,MAAMtC,aAAauC,QAAQ,UAAY,GCG7G,IAAMC,EAAcC,YAAgB,CAClCrC,MDFK,WAAqD,IAA/Bb,EAA8B,uDAAtB8C,EAAcK,EAAQ,uCACzD,OAAQA,EAAO9B,MACb,IAAK,WACH,MAAM,GAAN,mBACKrB,GADL,4BAGOmD,EAAO7B,SAHd,IAIIa,GAAInC,EAAMe,OAASf,EAAMA,EAAMe,OAAS,GAAGoB,GAAK,EAAI,MAI1D,IAAK,cACH,OAAOnC,EAAMgC,QAAO,SAACf,GAAD,OAAUA,EAAKkB,KAAOgB,EAAO7B,WAEnD,IAAK,kBACH,OAAOtB,EAAMkC,KAAI,SAACD,GAAD,OACfA,EAAIE,KAAOgB,EAAO7B,QAAlB,2BAEOW,GAFP,IAGI7C,WAAY6C,EAAI7C,YAEhB6C,KAGR,IAAK,kBACH,MAAuB,WAAnBkB,EAAO7B,QACFtB,EAAMgC,QAAO,SAACf,GAAD,OAA6B,IAAnBA,EAAK7B,aAEd,cAAnB+D,EAAO7B,QACFtB,EAAMgC,QAAO,SAACf,GAAD,OAA6B,IAAnBA,EAAK7B,aAE9B,GAET,IAAK,kBACH,MAAuB,cAAnB+D,EAAO7B,SAA2BtB,EAAMgB,OAAM,SAACiB,GAAD,OAA2B,IAAlBA,EAAI7C,aACtDY,EAAMkC,KAAI,SAACD,GAChB,OAAO,2BACFA,GADL,IAEE7C,WAAW,OAKVY,EAAMkC,KAAI,SAACD,GAChB,OAAO,2BACFA,GADL,IAEE7C,WAAW,OAIjB,IAAK,cACH,OAAOY,EAAMkC,KAAI,SAACD,GAChB,OAAOA,EAAIE,KAAOgB,EAAO7B,QAAQa,GAA1B,2BAEAF,GAFA,IAGH9C,KAAMgE,EAAO7B,QAAQmB,aAErBR,KAGR,QACE,OAAOjC,MCxDPoD,EAAQC,YAAYJ,GAC1BK,QAAQC,IAAIH,EAAMI,YACHJ,Q,MCAfK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,U","file":"static/js/main.fda09261.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { TextField, Button, Checkbox } from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\n\r\nexport const AddField = ({ onClickAdd, onInputChange, inputValue, onClickCheckbox, isChecked }) => {\r\n  return (\r\n    <div className=\"field\">\r\n      <Checkbox\r\n        onClick={onClickCheckbox}\r\n        checked={isChecked}\r\n        className=\"checkbox\"\r\n        icon={<RadioButtonUncheckedIcon />}\r\n        checkedIcon={<CheckCircleIcon />}\r\n      />\r\n      <TextField\r\n        value={inputValue}\r\n        onChange={onInputChange}\r\n        placeholder=\"Введите текст задачи...\"\r\n        variant=\"standard\"\r\n        fullWidth\r\n      />\r\n      <Button onClick={onClickAdd}>\r\n        <AddIcon />\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { IconButton, Checkbox, ListItem, Typography } from '@mui/material';\r\n\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\r\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\n\r\nexport const Item = ({ text, completed, onDelete, onClickChecked, updateTask }) => {\r\n\r\n  return (\r\n    <ListItem>\r\n      <div className=\"d-flex item\">\r\n        <Checkbox\r\n          onChange={onClickChecked}\r\n          checked={completed}\r\n          icon={<RadioButtonUncheckedIcon />}\r\n          checkedIcon={<CheckCircleIcon />}\r\n        />\r\n        <Typography className=\"item-text\">{text}</Typography>\r\n        <div className=\"item-buttons d-flex\">\r\n          <IconButton onClick={updateTask}>\r\n            <EditIcon style={{ fontSize: 20 }} />\r\n          </IconButton>\r\n          <IconButton onClick={onDelete}>\r\n            <DeleteOutlineIcon style={{ fontSize: 20 }} />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n    </ListItem>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Paper, Divider, Button, List, Tabs, Tab } from '@mui/material';\r\nimport { AddField } from './components/AddField';\r\nimport { Item } from './components/Item';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addTask, clearAllTasks, deleteTask, setCheckedAll, toggleComplete, updateTask } from './redux/actions/tasks';\r\n\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state) => state);\r\n\r\n  const [inputValue, setInputValue] = React.useState('');\r\n  const [isChecked, setIsChecked] = React.useState(false);\r\n  const [filterBy, setFilterBy] = React.useState('all');\r\n\r\n  React.useEffect(() => {\r\n    localStorage.setItem('state', JSON.stringify(state.tasks))\r\n  }, [state])\r\n\r\n  const filterIndex = {\r\n    all: 0,\r\n    active: 1,\r\n    completed: 2,\r\n  };\r\n\r\n  const handleClickAdd = () => {\r\n    if (inputValue.trim()) {\r\n      dispatch(addTask(inputValue, isChecked));\r\n      setInputValue('');\r\n      setIsChecked(false);\r\n    }\r\n  };\r\n\r\n  const onInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const handleClickDelete = (id) => {\r\n    if (window.confirm(`Вы хотите удалить \"${state.tasks.find((item) => item.id === id).text}\"?`))\r\n      dispatch(deleteTask(id));\r\n  };\r\n\r\n  const onClickCheckbox = () => {\r\n    setIsChecked(!isChecked);\r\n  };\r\n\r\n  const onClickChecked = (id) => {\r\n    dispatch(toggleComplete(id));\r\n  };\r\n\r\n  const handleClearAll = () => {\r\n    let deleteText = 'Удалить все задачи?';\r\n    if (filterBy === 'active') {\r\n      deleteText = 'Удалить все активные задачи?';\r\n    }\r\n    if (filterBy === 'completed') {\r\n      deleteText = 'Удалить все завершенные задачи?';\r\n    }\r\n    if (window.confirm(deleteText)) {\r\n      dispatch(clearAllTasks(filterBy));\r\n    }\r\n  };\r\n\r\n  const onClickCheckedAll = () => {\r\n    dispatch(setCheckedAll(filterBy));\r\n  };\r\n\r\n  const handleTaskUpdate = (id) => {\r\n    let updateText = prompt('Изменить текст задачи?', [state.tasks.find((obj) => obj.id === id).text]);\r\n    dispatch(updateTask(id, updateText));\r\n  };\r\n\r\n  const isDisabled = () => {\r\n    if (filterBy === 'all' && state.tasks.length === 0) {\r\n      return true;\r\n    }\r\n    if (filterBy === 'active' && state.tasks.every((item) => item.completed === true)) {\r\n      return true;\r\n    }\r\n    if (filterBy === 'completed' && state.tasks.every((item) => item.completed === false)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Paper className=\"wrapper\">\r\n        <Paper className=\"header\" elevation={0}>\r\n          <h4>Список задач</h4>\r\n        </Paper>\r\n        <AddField\r\n          inputValue={inputValue}\r\n          isChecked={isChecked}\r\n          onClickCheckbox={onClickCheckbox}\r\n          onClickAdd={handleClickAdd}\r\n          onInputChange={onInputChange}\r\n        />\r\n        <Divider />\r\n        <Tabs value={filterIndex[filterBy]}>\r\n          <Tab onClick={() => setFilterBy('all')} label=\"Все\" />\r\n          <Tab onClick={() => setFilterBy('active')} label=\"Активные\" />\r\n          <Tab onClick={() => setFilterBy('completed')} label=\"Завершённые\" />\r\n        </Tabs>\r\n        <Divider />\r\n        <List>\r\n          {state.tasks\r\n            .filter((obj) => {\r\n              if (filterBy === 'completed') {\r\n                return obj.completed;\r\n              }\r\n              if (filterBy === 'active') {\r\n                return !obj.completed;\r\n              }\r\n              return true;\r\n            })\r\n            .map((obj) => (\r\n              <Item\r\n                key={obj.id}\r\n                text={obj.text}\r\n                completed={obj.completed}\r\n                onDelete={() => handleClickDelete(obj.id)}\r\n                onClickChecked={() => onClickChecked(obj.id)}\r\n                updateTask={() => handleTaskUpdate(obj.id)}\r\n              />\r\n            ))}\r\n        </List>\r\n        <Divider />\r\n        <div className=\"check-buttons\">\r\n          <Button disabled={isDisabled()} onClick={onClickCheckedAll}>\r\n            {state.tasks.every((obj) => obj.completed === true) ? 'Снять отметки' : 'Отметить все'}\r\n          </Button>\r\n          <Button disabled={isDisabled()} onClick={handleClearAll}>\r\n            Очистить все\r\n          </Button>\r\n        </div>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const addTask = (text, completed) => ({\r\n  type: 'ADD_TASK',\r\n  payload: {\r\n    text,\r\n    completed\r\n  }\r\n})\r\n\r\nexport const deleteTask = id => ({\r\n  type: 'DELETE_TASK',\r\n  payload: id,\r\n})\r\n\r\nexport const toggleComplete = id => ({\r\n  type: 'TOGGLE_COMPLETE',\r\n  payload: id,\r\n})\r\n\r\nexport const clearAllTasks = filterType => ({\r\n  type: 'CLEAR_ALL_TASKS',\r\n  payload: filterType\r\n})\r\n\r\nexport const setCheckedAll = filterType => ({\r\n  type: 'SET_CHECKED_ALL',\r\n  payload: filterType\r\n})\r\n\r\nexport const updateTask = (id, text) => ({\r\n  type: 'UPDATE_TASK',\r\n  payload: {\r\n    id,\r\n    updateText: text\r\n  }\r\n})\r\n\r\n","const initialState = JSON.parse(localStorage.getItem('state')) ? JSON.parse(localStorage.getItem('state')) : [];\r\n\r\nexport function tasksReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'ADD_TASK':\r\n      return [\r\n        ...state,\r\n        {\r\n          ...action.payload,\r\n          id: state.length ? state[state.length - 1].id + 1 : 1,\r\n        },\r\n      ];\r\n\r\n    case 'DELETE_TASK':\r\n      return state.filter((item) => item.id !== action.payload);\r\n\r\n    case 'TOGGLE_COMPLETE':\r\n      return state.map((obj) =>\r\n        obj.id === action.payload\r\n          ? {\r\n            ...obj,\r\n            completed: !obj.completed,\r\n          }\r\n          : obj,\r\n      );\r\n\r\n    case 'CLEAR_ALL_TASKS':\r\n      if (action.payload === 'active') {\r\n        return state.filter((item) => item.completed === true);\r\n      }\r\n      if (action.payload === 'completed') {\r\n        return state.filter((item) => item.completed === false);\r\n      }\r\n      return [];\r\n\r\n    case 'SET_CHECKED_ALL':\r\n      if (action.payload === 'completed' || state.every((obj) => obj.completed === true)) {\r\n        return state.map((obj) => {\r\n          return {\r\n            ...obj,\r\n            completed: false,\r\n          };\r\n        });\r\n      }\r\n\r\n      return state.map((obj) => {\r\n        return {\r\n          ...obj,\r\n          completed: true,\r\n        };\r\n      });\r\n\r\n    case 'UPDATE_TASK':\r\n      return state.map((obj) => {\r\n        return obj.id === action.payload.id\r\n          ? {\r\n            ...obj,\r\n            text: action.payload.updateText,\r\n          }\r\n          : obj;\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import { createStore, combineReducers } from 'redux';\r\nimport { tasksReducer } from './reducers/tasks';\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer\r\n})\r\n\r\nconst store = createStore(rootReducer);\r\nconsole.log(store.getState());\r\nexport default store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux';\r\n\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}